// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DAppMeetingParticipant is an auto generated low-level Go binding around an user-defined struct.
type DAppMeetingParticipant struct {
	WalletAddress common.Address
	Name          string
	SessionID     string
}

// DAppMeetingParticipantDetails is an auto generated low-level Go binding around an user-defined struct.
type DAppMeetingParticipantDetails struct {
	WalletAddress common.Address
	Name          string
	SessionID     string
	Tracks        []DAppMeetingTrack
}

// DAppMeetingTrack is an auto generated low-level Go binding around an user-defined struct.
type DAppMeetingTrack struct {
	TrackName   string
	Mid         string
	Location    string
	IsPublished bool
	SessionId   string
	RoomId      string
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"EventForwardedToBackend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"eventData\",\"type\":\"bytes\"}],\"name\":\"EventForwardedToFrontend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublished\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"structDAppMeeting.Track[]\",\"name\":\"initialTracks\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"sessionDescription\",\"type\":\"bytes\"}],\"name\":\"ParticipantJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"ParticipantLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"}],\"name\":\"TrackAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backend\",\"type\":\"address\"}],\"name\":\"addAuthorizedBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isPublished\",\"type\":\"bool\"}],\"name\":\"addNewTrackAfterPublish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublished\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"}],\"internalType\":\"structDAppMeeting.Track\",\"name\":\"_newTrack\",\"type\":\"tuple\"}],\"name\":\"addTrack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authorizedBackends\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"createRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventData\",\"type\":\"bytes\"}],\"name\":\"forwardEventToBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_eventData\",\"type\":\"bytes\"}],\"name\":\"forwardEventToFrontend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"getParticipantInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sessionID\",\"type\":\"string\"}],\"internalType\":\"structDAppMeeting.Participant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getParticipantTracks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublished\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"}],\"internalType\":\"structDAppMeeting.Track[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_participant\",\"type\":\"address\"}],\"name\":\"getParticipantTracksCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"getRoomParticipantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"getRoomParticipantsDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sessionID\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublished\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"}],\"internalType\":\"structDAppMeeting.Track[]\",\"name\":\"tracks\",\"type\":\"tuple[]\"}],\"internalType\":\"structDAppMeeting.ParticipantDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublished\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"}],\"internalType\":\"structDAppMeeting.Track[]\",\"name\":\"_initialTracks\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"sessionDescription\",\"type\":\"bytes\"}],\"name\":\"joinRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"}],\"name\":\"leaveRoom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantTrackCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantTracks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"trackName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"mid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPublished\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"sessionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participantsInRoom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backend\",\"type\":\"address\"}],\"name\":\"removeAuthorizedBackend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"rooms\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"roomId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_roomId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_participantAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_sessionID\",\"type\":\"string\"}],\"name\":\"setParticipantSessionID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// AuthorizedBackends is a free data retrieval call binding the contract method 0x47100107.
//
// Solidity: function authorizedBackends(uint256 ) view returns(address)
func (_Contract *ContractCaller) AuthorizedBackends(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "authorizedBackends", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AuthorizedBackends is a free data retrieval call binding the contract method 0x47100107.
//
// Solidity: function authorizedBackends(uint256 ) view returns(address)
func (_Contract *ContractSession) AuthorizedBackends(arg0 *big.Int) (common.Address, error) {
	return _Contract.Contract.AuthorizedBackends(&_Contract.CallOpts, arg0)
}

// AuthorizedBackends is a free data retrieval call binding the contract method 0x47100107.
//
// Solidity: function authorizedBackends(uint256 ) view returns(address)
func (_Contract *ContractCallerSession) AuthorizedBackends(arg0 *big.Int) (common.Address, error) {
	return _Contract.Contract.AuthorizedBackends(&_Contract.CallOpts, arg0)
}

// GetParticipantInfo is a free data retrieval call binding the contract method 0xe970cf2c.
//
// Solidity: function getParticipantInfo(string _roomId) view returns((address,string,string))
func (_Contract *ContractCaller) GetParticipantInfo(opts *bind.CallOpts, _roomId string) (DAppMeetingParticipant, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getParticipantInfo", _roomId)

	if err != nil {
		return *new(DAppMeetingParticipant), err
	}

	out0 := *abi.ConvertType(out[0], new(DAppMeetingParticipant)).(*DAppMeetingParticipant)

	return out0, err

}

// GetParticipantInfo is a free data retrieval call binding the contract method 0xe970cf2c.
//
// Solidity: function getParticipantInfo(string _roomId) view returns((address,string,string))
func (_Contract *ContractSession) GetParticipantInfo(_roomId string) (DAppMeetingParticipant, error) {
	return _Contract.Contract.GetParticipantInfo(&_Contract.CallOpts, _roomId)
}

// GetParticipantInfo is a free data retrieval call binding the contract method 0xe970cf2c.
//
// Solidity: function getParticipantInfo(string _roomId) view returns((address,string,string))
func (_Contract *ContractCallerSession) GetParticipantInfo(_roomId string) (DAppMeetingParticipant, error) {
	return _Contract.Contract.GetParticipantInfo(&_Contract.CallOpts, _roomId)
}

// GetParticipantTracks is a free data retrieval call binding the contract method 0xc3241b95.
//
// Solidity: function getParticipantTracks(string _roomId, address _participant) view returns((string,string,string,bool,string,string)[])
func (_Contract *ContractCaller) GetParticipantTracks(opts *bind.CallOpts, _roomId string, _participant common.Address) ([]DAppMeetingTrack, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getParticipantTracks", _roomId, _participant)

	if err != nil {
		return *new([]DAppMeetingTrack), err
	}

	out0 := *abi.ConvertType(out[0], new([]DAppMeetingTrack)).(*[]DAppMeetingTrack)

	return out0, err

}

// GetParticipantTracks is a free data retrieval call binding the contract method 0xc3241b95.
//
// Solidity: function getParticipantTracks(string _roomId, address _participant) view returns((string,string,string,bool,string,string)[])
func (_Contract *ContractSession) GetParticipantTracks(_roomId string, _participant common.Address) ([]DAppMeetingTrack, error) {
	return _Contract.Contract.GetParticipantTracks(&_Contract.CallOpts, _roomId, _participant)
}

// GetParticipantTracks is a free data retrieval call binding the contract method 0xc3241b95.
//
// Solidity: function getParticipantTracks(string _roomId, address _participant) view returns((string,string,string,bool,string,string)[])
func (_Contract *ContractCallerSession) GetParticipantTracks(_roomId string, _participant common.Address) ([]DAppMeetingTrack, error) {
	return _Contract.Contract.GetParticipantTracks(&_Contract.CallOpts, _roomId, _participant)
}

// GetParticipantTracksCount is a free data retrieval call binding the contract method 0xf7cc8724.
//
// Solidity: function getParticipantTracksCount(string _roomId, address _participant) view returns(uint256)
func (_Contract *ContractCaller) GetParticipantTracksCount(opts *bind.CallOpts, _roomId string, _participant common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getParticipantTracksCount", _roomId, _participant)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetParticipantTracksCount is a free data retrieval call binding the contract method 0xf7cc8724.
//
// Solidity: function getParticipantTracksCount(string _roomId, address _participant) view returns(uint256)
func (_Contract *ContractSession) GetParticipantTracksCount(_roomId string, _participant common.Address) (*big.Int, error) {
	return _Contract.Contract.GetParticipantTracksCount(&_Contract.CallOpts, _roomId, _participant)
}

// GetParticipantTracksCount is a free data retrieval call binding the contract method 0xf7cc8724.
//
// Solidity: function getParticipantTracksCount(string _roomId, address _participant) view returns(uint256)
func (_Contract *ContractCallerSession) GetParticipantTracksCount(_roomId string, _participant common.Address) (*big.Int, error) {
	return _Contract.Contract.GetParticipantTracksCount(&_Contract.CallOpts, _roomId, _participant)
}

// GetRoomParticipantsCount is a free data retrieval call binding the contract method 0x3f2cc59f.
//
// Solidity: function getRoomParticipantsCount(string _roomId) view returns(uint256)
func (_Contract *ContractCaller) GetRoomParticipantsCount(opts *bind.CallOpts, _roomId string) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getRoomParticipantsCount", _roomId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoomParticipantsCount is a free data retrieval call binding the contract method 0x3f2cc59f.
//
// Solidity: function getRoomParticipantsCount(string _roomId) view returns(uint256)
func (_Contract *ContractSession) GetRoomParticipantsCount(_roomId string) (*big.Int, error) {
	return _Contract.Contract.GetRoomParticipantsCount(&_Contract.CallOpts, _roomId)
}

// GetRoomParticipantsCount is a free data retrieval call binding the contract method 0x3f2cc59f.
//
// Solidity: function getRoomParticipantsCount(string _roomId) view returns(uint256)
func (_Contract *ContractCallerSession) GetRoomParticipantsCount(_roomId string) (*big.Int, error) {
	return _Contract.Contract.GetRoomParticipantsCount(&_Contract.CallOpts, _roomId)
}

// GetRoomParticipantsDetails is a free data retrieval call binding the contract method 0x9debe881.
//
// Solidity: function getRoomParticipantsDetails(string _roomId) view returns((address,string,string,(string,string,string,bool,string,string)[])[])
func (_Contract *ContractCaller) GetRoomParticipantsDetails(opts *bind.CallOpts, _roomId string) ([]DAppMeetingParticipantDetails, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getRoomParticipantsDetails", _roomId)

	if err != nil {
		return *new([]DAppMeetingParticipantDetails), err
	}

	out0 := *abi.ConvertType(out[0], new([]DAppMeetingParticipantDetails)).(*[]DAppMeetingParticipantDetails)

	return out0, err

}

// GetRoomParticipantsDetails is a free data retrieval call binding the contract method 0x9debe881.
//
// Solidity: function getRoomParticipantsDetails(string _roomId) view returns((address,string,string,(string,string,string,bool,string,string)[])[])
func (_Contract *ContractSession) GetRoomParticipantsDetails(_roomId string) ([]DAppMeetingParticipantDetails, error) {
	return _Contract.Contract.GetRoomParticipantsDetails(&_Contract.CallOpts, _roomId)
}

// GetRoomParticipantsDetails is a free data retrieval call binding the contract method 0x9debe881.
//
// Solidity: function getRoomParticipantsDetails(string _roomId) view returns((address,string,string,(string,string,string,bool,string,string)[])[])
func (_Contract *ContractCallerSession) GetRoomParticipantsDetails(_roomId string) ([]DAppMeetingParticipantDetails, error) {
	return _Contract.Contract.GetRoomParticipantsDetails(&_Contract.CallOpts, _roomId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// ParticipantIndices is a free data retrieval call binding the contract method 0x8df58945.
//
// Solidity: function participantIndices(string , address ) view returns(uint256)
func (_Contract *ContractCaller) ParticipantIndices(opts *bind.CallOpts, arg0 string, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "participantIndices", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParticipantIndices is a free data retrieval call binding the contract method 0x8df58945.
//
// Solidity: function participantIndices(string , address ) view returns(uint256)
func (_Contract *ContractSession) ParticipantIndices(arg0 string, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.ParticipantIndices(&_Contract.CallOpts, arg0, arg1)
}

// ParticipantIndices is a free data retrieval call binding the contract method 0x8df58945.
//
// Solidity: function participantIndices(string , address ) view returns(uint256)
func (_Contract *ContractCallerSession) ParticipantIndices(arg0 string, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.ParticipantIndices(&_Contract.CallOpts, arg0, arg1)
}

// ParticipantTrackCount is a free data retrieval call binding the contract method 0x0062b748.
//
// Solidity: function participantTrackCount(string , address ) view returns(uint256)
func (_Contract *ContractCaller) ParticipantTrackCount(opts *bind.CallOpts, arg0 string, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "participantTrackCount", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ParticipantTrackCount is a free data retrieval call binding the contract method 0x0062b748.
//
// Solidity: function participantTrackCount(string , address ) view returns(uint256)
func (_Contract *ContractSession) ParticipantTrackCount(arg0 string, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.ParticipantTrackCount(&_Contract.CallOpts, arg0, arg1)
}

// ParticipantTrackCount is a free data retrieval call binding the contract method 0x0062b748.
//
// Solidity: function participantTrackCount(string , address ) view returns(uint256)
func (_Contract *ContractCallerSession) ParticipantTrackCount(arg0 string, arg1 common.Address) (*big.Int, error) {
	return _Contract.Contract.ParticipantTrackCount(&_Contract.CallOpts, arg0, arg1)
}

// ParticipantTracks is a free data retrieval call binding the contract method 0x5b85facc.
//
// Solidity: function participantTracks(string , address , uint256 ) view returns(string trackName, string mid, string location, bool isPublished, string sessionId, string roomId)
func (_Contract *ContractCaller) ParticipantTracks(opts *bind.CallOpts, arg0 string, arg1 common.Address, arg2 *big.Int) (struct {
	TrackName   string
	Mid         string
	Location    string
	IsPublished bool
	SessionId   string
	RoomId      string
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "participantTracks", arg0, arg1, arg2)

	outstruct := new(struct {
		TrackName   string
		Mid         string
		Location    string
		IsPublished bool
		SessionId   string
		RoomId      string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TrackName = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Mid = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Location = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.IsPublished = *abi.ConvertType(out[3], new(bool)).(*bool)
	outstruct.SessionId = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.RoomId = *abi.ConvertType(out[5], new(string)).(*string)

	return *outstruct, err

}

// ParticipantTracks is a free data retrieval call binding the contract method 0x5b85facc.
//
// Solidity: function participantTracks(string , address , uint256 ) view returns(string trackName, string mid, string location, bool isPublished, string sessionId, string roomId)
func (_Contract *ContractSession) ParticipantTracks(arg0 string, arg1 common.Address, arg2 *big.Int) (struct {
	TrackName   string
	Mid         string
	Location    string
	IsPublished bool
	SessionId   string
	RoomId      string
}, error) {
	return _Contract.Contract.ParticipantTracks(&_Contract.CallOpts, arg0, arg1, arg2)
}

// ParticipantTracks is a free data retrieval call binding the contract method 0x5b85facc.
//
// Solidity: function participantTracks(string , address , uint256 ) view returns(string trackName, string mid, string location, bool isPublished, string sessionId, string roomId)
func (_Contract *ContractCallerSession) ParticipantTracks(arg0 string, arg1 common.Address, arg2 *big.Int) (struct {
	TrackName   string
	Mid         string
	Location    string
	IsPublished bool
	SessionId   string
	RoomId      string
}, error) {
	return _Contract.Contract.ParticipantTracks(&_Contract.CallOpts, arg0, arg1, arg2)
}

// ParticipantsInRoom is a free data retrieval call binding the contract method 0x2aba9dda.
//
// Solidity: function participantsInRoom(string , address ) view returns(bool)
func (_Contract *ContractCaller) ParticipantsInRoom(opts *bind.CallOpts, arg0 string, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "participantsInRoom", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ParticipantsInRoom is a free data retrieval call binding the contract method 0x2aba9dda.
//
// Solidity: function participantsInRoom(string , address ) view returns(bool)
func (_Contract *ContractSession) ParticipantsInRoom(arg0 string, arg1 common.Address) (bool, error) {
	return _Contract.Contract.ParticipantsInRoom(&_Contract.CallOpts, arg0, arg1)
}

// ParticipantsInRoom is a free data retrieval call binding the contract method 0x2aba9dda.
//
// Solidity: function participantsInRoom(string , address ) view returns(bool)
func (_Contract *ContractCallerSession) ParticipantsInRoom(arg0 string, arg1 common.Address) (bool, error) {
	return _Contract.Contract.ParticipantsInRoom(&_Contract.CallOpts, arg0, arg1)
}

// Rooms is a free data retrieval call binding the contract method 0xbbbcc869.
//
// Solidity: function rooms(string ) view returns(string roomId, uint256 creationTime)
func (_Contract *ContractCaller) Rooms(opts *bind.CallOpts, arg0 string) (struct {
	RoomId       string
	CreationTime *big.Int
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "rooms", arg0)

	outstruct := new(struct {
		RoomId       string
		CreationTime *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.RoomId = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.CreationTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Rooms is a free data retrieval call binding the contract method 0xbbbcc869.
//
// Solidity: function rooms(string ) view returns(string roomId, uint256 creationTime)
func (_Contract *ContractSession) Rooms(arg0 string) (struct {
	RoomId       string
	CreationTime *big.Int
}, error) {
	return _Contract.Contract.Rooms(&_Contract.CallOpts, arg0)
}

// Rooms is a free data retrieval call binding the contract method 0xbbbcc869.
//
// Solidity: function rooms(string ) view returns(string roomId, uint256 creationTime)
func (_Contract *ContractCallerSession) Rooms(arg0 string) (struct {
	RoomId       string
	CreationTime *big.Int
}, error) {
	return _Contract.Contract.Rooms(&_Contract.CallOpts, arg0)
}

// AddAuthorizedBackend is a paid mutator transaction binding the contract method 0xf2776d2e.
//
// Solidity: function addAuthorizedBackend(address _backend) returns()
func (_Contract *ContractTransactor) AddAuthorizedBackend(opts *bind.TransactOpts, _backend common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addAuthorizedBackend", _backend)
}

// AddAuthorizedBackend is a paid mutator transaction binding the contract method 0xf2776d2e.
//
// Solidity: function addAuthorizedBackend(address _backend) returns()
func (_Contract *ContractSession) AddAuthorizedBackend(_backend common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddAuthorizedBackend(&_Contract.TransactOpts, _backend)
}

// AddAuthorizedBackend is a paid mutator transaction binding the contract method 0xf2776d2e.
//
// Solidity: function addAuthorizedBackend(address _backend) returns()
func (_Contract *ContractTransactorSession) AddAuthorizedBackend(_backend common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AddAuthorizedBackend(&_Contract.TransactOpts, _backend)
}

// AddNewTrackAfterPublish is a paid mutator transaction binding the contract method 0x1513e2bc.
//
// Solidity: function addNewTrackAfterPublish(string _roomId, address _participant, string _sessionId, string _trackName, string _mid, string _location, bool _isPublished) returns()
func (_Contract *ContractTransactor) AddNewTrackAfterPublish(opts *bind.TransactOpts, _roomId string, _participant common.Address, _sessionId string, _trackName string, _mid string, _location string, _isPublished bool) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addNewTrackAfterPublish", _roomId, _participant, _sessionId, _trackName, _mid, _location, _isPublished)
}

// AddNewTrackAfterPublish is a paid mutator transaction binding the contract method 0x1513e2bc.
//
// Solidity: function addNewTrackAfterPublish(string _roomId, address _participant, string _sessionId, string _trackName, string _mid, string _location, bool _isPublished) returns()
func (_Contract *ContractSession) AddNewTrackAfterPublish(_roomId string, _participant common.Address, _sessionId string, _trackName string, _mid string, _location string, _isPublished bool) (*types.Transaction, error) {
	return _Contract.Contract.AddNewTrackAfterPublish(&_Contract.TransactOpts, _roomId, _participant, _sessionId, _trackName, _mid, _location, _isPublished)
}

// AddNewTrackAfterPublish is a paid mutator transaction binding the contract method 0x1513e2bc.
//
// Solidity: function addNewTrackAfterPublish(string _roomId, address _participant, string _sessionId, string _trackName, string _mid, string _location, bool _isPublished) returns()
func (_Contract *ContractTransactorSession) AddNewTrackAfterPublish(_roomId string, _participant common.Address, _sessionId string, _trackName string, _mid string, _location string, _isPublished bool) (*types.Transaction, error) {
	return _Contract.Contract.AddNewTrackAfterPublish(&_Contract.TransactOpts, _roomId, _participant, _sessionId, _trackName, _mid, _location, _isPublished)
}

// AddTrack is a paid mutator transaction binding the contract method 0x3b4ddda8.
//
// Solidity: function addTrack(string _roomId, (string,string,string,bool,string,string) _newTrack) returns()
func (_Contract *ContractTransactor) AddTrack(opts *bind.TransactOpts, _roomId string, _newTrack DAppMeetingTrack) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addTrack", _roomId, _newTrack)
}

// AddTrack is a paid mutator transaction binding the contract method 0x3b4ddda8.
//
// Solidity: function addTrack(string _roomId, (string,string,string,bool,string,string) _newTrack) returns()
func (_Contract *ContractSession) AddTrack(_roomId string, _newTrack DAppMeetingTrack) (*types.Transaction, error) {
	return _Contract.Contract.AddTrack(&_Contract.TransactOpts, _roomId, _newTrack)
}

// AddTrack is a paid mutator transaction binding the contract method 0x3b4ddda8.
//
// Solidity: function addTrack(string _roomId, (string,string,string,bool,string,string) _newTrack) returns()
func (_Contract *ContractTransactorSession) AddTrack(_roomId string, _newTrack DAppMeetingTrack) (*types.Transaction, error) {
	return _Contract.Contract.AddTrack(&_Contract.TransactOpts, _roomId, _newTrack)
}

// CreateRoom is a paid mutator transaction binding the contract method 0x7306d2dd.
//
// Solidity: function createRoom(string _roomId) returns()
func (_Contract *ContractTransactor) CreateRoom(opts *bind.TransactOpts, _roomId string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createRoom", _roomId)
}

// CreateRoom is a paid mutator transaction binding the contract method 0x7306d2dd.
//
// Solidity: function createRoom(string _roomId) returns()
func (_Contract *ContractSession) CreateRoom(_roomId string) (*types.Transaction, error) {
	return _Contract.Contract.CreateRoom(&_Contract.TransactOpts, _roomId)
}

// CreateRoom is a paid mutator transaction binding the contract method 0x7306d2dd.
//
// Solidity: function createRoom(string _roomId) returns()
func (_Contract *ContractTransactorSession) CreateRoom(_roomId string) (*types.Transaction, error) {
	return _Contract.Contract.CreateRoom(&_Contract.TransactOpts, _roomId)
}

// ForwardEventToBackend is a paid mutator transaction binding the contract method 0xaaea8180.
//
// Solidity: function forwardEventToBackend(string _roomId, bytes _eventData) returns()
func (_Contract *ContractTransactor) ForwardEventToBackend(opts *bind.TransactOpts, _roomId string, _eventData []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "forwardEventToBackend", _roomId, _eventData)
}

// ForwardEventToBackend is a paid mutator transaction binding the contract method 0xaaea8180.
//
// Solidity: function forwardEventToBackend(string _roomId, bytes _eventData) returns()
func (_Contract *ContractSession) ForwardEventToBackend(_roomId string, _eventData []byte) (*types.Transaction, error) {
	return _Contract.Contract.ForwardEventToBackend(&_Contract.TransactOpts, _roomId, _eventData)
}

// ForwardEventToBackend is a paid mutator transaction binding the contract method 0xaaea8180.
//
// Solidity: function forwardEventToBackend(string _roomId, bytes _eventData) returns()
func (_Contract *ContractTransactorSession) ForwardEventToBackend(_roomId string, _eventData []byte) (*types.Transaction, error) {
	return _Contract.Contract.ForwardEventToBackend(&_Contract.TransactOpts, _roomId, _eventData)
}

// ForwardEventToFrontend is a paid mutator transaction binding the contract method 0xf3398cf6.
//
// Solidity: function forwardEventToFrontend(string _roomId, address _participant, bytes _eventData) returns()
func (_Contract *ContractTransactor) ForwardEventToFrontend(opts *bind.TransactOpts, _roomId string, _participant common.Address, _eventData []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "forwardEventToFrontend", _roomId, _participant, _eventData)
}

// ForwardEventToFrontend is a paid mutator transaction binding the contract method 0xf3398cf6.
//
// Solidity: function forwardEventToFrontend(string _roomId, address _participant, bytes _eventData) returns()
func (_Contract *ContractSession) ForwardEventToFrontend(_roomId string, _participant common.Address, _eventData []byte) (*types.Transaction, error) {
	return _Contract.Contract.ForwardEventToFrontend(&_Contract.TransactOpts, _roomId, _participant, _eventData)
}

// ForwardEventToFrontend is a paid mutator transaction binding the contract method 0xf3398cf6.
//
// Solidity: function forwardEventToFrontend(string _roomId, address _participant, bytes _eventData) returns()
func (_Contract *ContractTransactorSession) ForwardEventToFrontend(_roomId string, _participant common.Address, _eventData []byte) (*types.Transaction, error) {
	return _Contract.Contract.ForwardEventToFrontend(&_Contract.TransactOpts, _roomId, _participant, _eventData)
}

// JoinRoom is a paid mutator transaction binding the contract method 0x3c229779.
//
// Solidity: function joinRoom(string _roomId, string _name, (string,string,string,bool,string,string)[] _initialTracks, bytes sessionDescription) returns()
func (_Contract *ContractTransactor) JoinRoom(opts *bind.TransactOpts, _roomId string, _name string, _initialTracks []DAppMeetingTrack, sessionDescription []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "joinRoom", _roomId, _name, _initialTracks, sessionDescription)
}

// JoinRoom is a paid mutator transaction binding the contract method 0x3c229779.
//
// Solidity: function joinRoom(string _roomId, string _name, (string,string,string,bool,string,string)[] _initialTracks, bytes sessionDescription) returns()
func (_Contract *ContractSession) JoinRoom(_roomId string, _name string, _initialTracks []DAppMeetingTrack, sessionDescription []byte) (*types.Transaction, error) {
	return _Contract.Contract.JoinRoom(&_Contract.TransactOpts, _roomId, _name, _initialTracks, sessionDescription)
}

// JoinRoom is a paid mutator transaction binding the contract method 0x3c229779.
//
// Solidity: function joinRoom(string _roomId, string _name, (string,string,string,bool,string,string)[] _initialTracks, bytes sessionDescription) returns()
func (_Contract *ContractTransactorSession) JoinRoom(_roomId string, _name string, _initialTracks []DAppMeetingTrack, sessionDescription []byte) (*types.Transaction, error) {
	return _Contract.Contract.JoinRoom(&_Contract.TransactOpts, _roomId, _name, _initialTracks, sessionDescription)
}

// LeaveRoom is a paid mutator transaction binding the contract method 0xfab38543.
//
// Solidity: function leaveRoom(string _roomId) returns()
func (_Contract *ContractTransactor) LeaveRoom(opts *bind.TransactOpts, _roomId string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "leaveRoom", _roomId)
}

// LeaveRoom is a paid mutator transaction binding the contract method 0xfab38543.
//
// Solidity: function leaveRoom(string _roomId) returns()
func (_Contract *ContractSession) LeaveRoom(_roomId string) (*types.Transaction, error) {
	return _Contract.Contract.LeaveRoom(&_Contract.TransactOpts, _roomId)
}

// LeaveRoom is a paid mutator transaction binding the contract method 0xfab38543.
//
// Solidity: function leaveRoom(string _roomId) returns()
func (_Contract *ContractTransactorSession) LeaveRoom(_roomId string) (*types.Transaction, error) {
	return _Contract.Contract.LeaveRoom(&_Contract.TransactOpts, _roomId)
}

// RemoveAuthorizedBackend is a paid mutator transaction binding the contract method 0x9ba78fd9.
//
// Solidity: function removeAuthorizedBackend(address _backend) returns()
func (_Contract *ContractTransactor) RemoveAuthorizedBackend(opts *bind.TransactOpts, _backend common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "removeAuthorizedBackend", _backend)
}

// RemoveAuthorizedBackend is a paid mutator transaction binding the contract method 0x9ba78fd9.
//
// Solidity: function removeAuthorizedBackend(address _backend) returns()
func (_Contract *ContractSession) RemoveAuthorizedBackend(_backend common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RemoveAuthorizedBackend(&_Contract.TransactOpts, _backend)
}

// RemoveAuthorizedBackend is a paid mutator transaction binding the contract method 0x9ba78fd9.
//
// Solidity: function removeAuthorizedBackend(address _backend) returns()
func (_Contract *ContractTransactorSession) RemoveAuthorizedBackend(_backend common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RemoveAuthorizedBackend(&_Contract.TransactOpts, _backend)
}

// SetParticipantSessionID is a paid mutator transaction binding the contract method 0xbb9af00d.
//
// Solidity: function setParticipantSessionID(string _roomId, address _participantAddress, string _sessionID) returns()
func (_Contract *ContractTransactor) SetParticipantSessionID(opts *bind.TransactOpts, _roomId string, _participantAddress common.Address, _sessionID string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setParticipantSessionID", _roomId, _participantAddress, _sessionID)
}

// SetParticipantSessionID is a paid mutator transaction binding the contract method 0xbb9af00d.
//
// Solidity: function setParticipantSessionID(string _roomId, address _participantAddress, string _sessionID) returns()
func (_Contract *ContractSession) SetParticipantSessionID(_roomId string, _participantAddress common.Address, _sessionID string) (*types.Transaction, error) {
	return _Contract.Contract.SetParticipantSessionID(&_Contract.TransactOpts, _roomId, _participantAddress, _sessionID)
}

// SetParticipantSessionID is a paid mutator transaction binding the contract method 0xbb9af00d.
//
// Solidity: function setParticipantSessionID(string _roomId, address _participantAddress, string _sessionID) returns()
func (_Contract *ContractTransactorSession) SetParticipantSessionID(_roomId string, _participantAddress common.Address, _sessionID string) (*types.Transaction, error) {
	return _Contract.Contract.SetParticipantSessionID(&_Contract.TransactOpts, _roomId, _participantAddress, _sessionID)
}

// ContractEventForwardedToBackendIterator is returned from FilterEventForwardedToBackend and is used to iterate over the raw logs and unpacked data for EventForwardedToBackend events raised by the Contract contract.
type ContractEventForwardedToBackendIterator struct {
	Event *ContractEventForwardedToBackend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEventForwardedToBackendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEventForwardedToBackend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEventForwardedToBackend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEventForwardedToBackendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEventForwardedToBackendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEventForwardedToBackend represents a EventForwardedToBackend event raised by the Contract contract.
type ContractEventForwardedToBackend struct {
	RoomId    string
	Sender    common.Address
	EventData []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterEventForwardedToBackend is a free log retrieval operation binding the contract event 0x5af2a6a9c8117113b24e80f03488d6bb6d93973b5faed013eca8657949140f1e.
//
// Solidity: event EventForwardedToBackend(string roomId, address sender, bytes eventData)
func (_Contract *ContractFilterer) FilterEventForwardedToBackend(opts *bind.FilterOpts) (*ContractEventForwardedToBackendIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "EventForwardedToBackend")
	if err != nil {
		return nil, err
	}
	return &ContractEventForwardedToBackendIterator{contract: _Contract.contract, event: "EventForwardedToBackend", logs: logs, sub: sub}, nil
}

// WatchEventForwardedToBackend is a free log subscription operation binding the contract event 0x5af2a6a9c8117113b24e80f03488d6bb6d93973b5faed013eca8657949140f1e.
//
// Solidity: event EventForwardedToBackend(string roomId, address sender, bytes eventData)
func (_Contract *ContractFilterer) WatchEventForwardedToBackend(opts *bind.WatchOpts, sink chan<- *ContractEventForwardedToBackend) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "EventForwardedToBackend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEventForwardedToBackend)
				if err := _Contract.contract.UnpackLog(event, "EventForwardedToBackend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventForwardedToBackend is a log parse operation binding the contract event 0x5af2a6a9c8117113b24e80f03488d6bb6d93973b5faed013eca8657949140f1e.
//
// Solidity: event EventForwardedToBackend(string roomId, address sender, bytes eventData)
func (_Contract *ContractFilterer) ParseEventForwardedToBackend(log types.Log) (*ContractEventForwardedToBackend, error) {
	event := new(ContractEventForwardedToBackend)
	if err := _Contract.contract.UnpackLog(event, "EventForwardedToBackend", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEventForwardedToFrontendIterator is returned from FilterEventForwardedToFrontend and is used to iterate over the raw logs and unpacked data for EventForwardedToFrontend events raised by the Contract contract.
type ContractEventForwardedToFrontendIterator struct {
	Event *ContractEventForwardedToFrontend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEventForwardedToFrontendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEventForwardedToFrontend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEventForwardedToFrontend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEventForwardedToFrontendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEventForwardedToFrontendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEventForwardedToFrontend represents a EventForwardedToFrontend event raised by the Contract contract.
type ContractEventForwardedToFrontend struct {
	RoomId      string
	Participant common.Address
	EventData   []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEventForwardedToFrontend is a free log retrieval operation binding the contract event 0xb588e6e55cc56c9ac78812d33d4f8fbbebe720ee569bed8fd4615ddb178fcb12.
//
// Solidity: event EventForwardedToFrontend(string roomId, address participant, bytes eventData)
func (_Contract *ContractFilterer) FilterEventForwardedToFrontend(opts *bind.FilterOpts) (*ContractEventForwardedToFrontendIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "EventForwardedToFrontend")
	if err != nil {
		return nil, err
	}
	return &ContractEventForwardedToFrontendIterator{contract: _Contract.contract, event: "EventForwardedToFrontend", logs: logs, sub: sub}, nil
}

// WatchEventForwardedToFrontend is a free log subscription operation binding the contract event 0xb588e6e55cc56c9ac78812d33d4f8fbbebe720ee569bed8fd4615ddb178fcb12.
//
// Solidity: event EventForwardedToFrontend(string roomId, address participant, bytes eventData)
func (_Contract *ContractFilterer) WatchEventForwardedToFrontend(opts *bind.WatchOpts, sink chan<- *ContractEventForwardedToFrontend) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "EventForwardedToFrontend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEventForwardedToFrontend)
				if err := _Contract.contract.UnpackLog(event, "EventForwardedToFrontend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventForwardedToFrontend is a log parse operation binding the contract event 0xb588e6e55cc56c9ac78812d33d4f8fbbebe720ee569bed8fd4615ddb178fcb12.
//
// Solidity: event EventForwardedToFrontend(string roomId, address participant, bytes eventData)
func (_Contract *ContractFilterer) ParseEventForwardedToFrontend(log types.Log) (*ContractEventForwardedToFrontend, error) {
	event := new(ContractEventForwardedToFrontend)
	if err := _Contract.contract.UnpackLog(event, "EventForwardedToFrontend", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractParticipantJoinedIterator is returned from FilterParticipantJoined and is used to iterate over the raw logs and unpacked data for ParticipantJoined events raised by the Contract contract.
type ContractParticipantJoinedIterator struct {
	Event *ContractParticipantJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractParticipantJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractParticipantJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractParticipantJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractParticipantJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractParticipantJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractParticipantJoined represents a ParticipantJoined event raised by the Contract contract.
type ContractParticipantJoined struct {
	RoomId             string
	Participant        common.Address
	InitialTracks      []DAppMeetingTrack
	SessionDescription []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterParticipantJoined is a free log retrieval operation binding the contract event 0x21e27f169d16f9bc6b07bf8a2c343f07f22bfd14122a3181cf25419574f0109b.
//
// Solidity: event ParticipantJoined(string roomId, address participant, (string,string,string,bool,string,string)[] initialTracks, bytes sessionDescription)
func (_Contract *ContractFilterer) FilterParticipantJoined(opts *bind.FilterOpts) (*ContractParticipantJoinedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ParticipantJoined")
	if err != nil {
		return nil, err
	}
	return &ContractParticipantJoinedIterator{contract: _Contract.contract, event: "ParticipantJoined", logs: logs, sub: sub}, nil
}

// WatchParticipantJoined is a free log subscription operation binding the contract event 0x21e27f169d16f9bc6b07bf8a2c343f07f22bfd14122a3181cf25419574f0109b.
//
// Solidity: event ParticipantJoined(string roomId, address participant, (string,string,string,bool,string,string)[] initialTracks, bytes sessionDescription)
func (_Contract *ContractFilterer) WatchParticipantJoined(opts *bind.WatchOpts, sink chan<- *ContractParticipantJoined) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ParticipantJoined")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractParticipantJoined)
				if err := _Contract.contract.UnpackLog(event, "ParticipantJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParticipantJoined is a log parse operation binding the contract event 0x21e27f169d16f9bc6b07bf8a2c343f07f22bfd14122a3181cf25419574f0109b.
//
// Solidity: event ParticipantJoined(string roomId, address participant, (string,string,string,bool,string,string)[] initialTracks, bytes sessionDescription)
func (_Contract *ContractFilterer) ParseParticipantJoined(log types.Log) (*ContractParticipantJoined, error) {
	event := new(ContractParticipantJoined)
	if err := _Contract.contract.UnpackLog(event, "ParticipantJoined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractParticipantLeftIterator is returned from FilterParticipantLeft and is used to iterate over the raw logs and unpacked data for ParticipantLeft events raised by the Contract contract.
type ContractParticipantLeftIterator struct {
	Event *ContractParticipantLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractParticipantLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractParticipantLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractParticipantLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractParticipantLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractParticipantLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractParticipantLeft represents a ParticipantLeft event raised by the Contract contract.
type ContractParticipantLeft struct {
	RoomId      string
	Participant common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterParticipantLeft is a free log retrieval operation binding the contract event 0xb4d5a3866c2b36a076b8cac89e6068deeff68398781315f07060bdead654e63b.
//
// Solidity: event ParticipantLeft(string roomId, address participant)
func (_Contract *ContractFilterer) FilterParticipantLeft(opts *bind.FilterOpts) (*ContractParticipantLeftIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ParticipantLeft")
	if err != nil {
		return nil, err
	}
	return &ContractParticipantLeftIterator{contract: _Contract.contract, event: "ParticipantLeft", logs: logs, sub: sub}, nil
}

// WatchParticipantLeft is a free log subscription operation binding the contract event 0xb4d5a3866c2b36a076b8cac89e6068deeff68398781315f07060bdead654e63b.
//
// Solidity: event ParticipantLeft(string roomId, address participant)
func (_Contract *ContractFilterer) WatchParticipantLeft(opts *bind.WatchOpts, sink chan<- *ContractParticipantLeft) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ParticipantLeft")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractParticipantLeft)
				if err := _Contract.contract.UnpackLog(event, "ParticipantLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParticipantLeft is a log parse operation binding the contract event 0xb4d5a3866c2b36a076b8cac89e6068deeff68398781315f07060bdead654e63b.
//
// Solidity: event ParticipantLeft(string roomId, address participant)
func (_Contract *ContractFilterer) ParseParticipantLeft(log types.Log) (*ContractParticipantLeft, error) {
	event := new(ContractParticipantLeft)
	if err := _Contract.contract.UnpackLog(event, "ParticipantLeft", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractTrackAddedIterator is returned from FilterTrackAdded and is used to iterate over the raw logs and unpacked data for TrackAdded events raised by the Contract contract.
type ContractTrackAddedIterator struct {
	Event *ContractTrackAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractTrackAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractTrackAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractTrackAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractTrackAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractTrackAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractTrackAdded represents a TrackAdded event raised by the Contract contract.
type ContractTrackAdded struct {
	RoomId      string
	Participant common.Address
	TrackName   string
	SessionId   string
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterTrackAdded is a free log retrieval operation binding the contract event 0xf337a1349abe7e5450f06cf208d0a772bca1fcde71f86c23a81a38ea6f087fe3.
//
// Solidity: event TrackAdded(string roomId, address participant, string trackName, string sessionId)
func (_Contract *ContractFilterer) FilterTrackAdded(opts *bind.FilterOpts) (*ContractTrackAddedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "TrackAdded")
	if err != nil {
		return nil, err
	}
	return &ContractTrackAddedIterator{contract: _Contract.contract, event: "TrackAdded", logs: logs, sub: sub}, nil
}

// WatchTrackAdded is a free log subscription operation binding the contract event 0xf337a1349abe7e5450f06cf208d0a772bca1fcde71f86c23a81a38ea6f087fe3.
//
// Solidity: event TrackAdded(string roomId, address participant, string trackName, string sessionId)
func (_Contract *ContractFilterer) WatchTrackAdded(opts *bind.WatchOpts, sink chan<- *ContractTrackAdded) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "TrackAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractTrackAdded)
				if err := _Contract.contract.UnpackLog(event, "TrackAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrackAdded is a log parse operation binding the contract event 0xf337a1349abe7e5450f06cf208d0a772bca1fcde71f86c23a81a38ea6f087fe3.
//
// Solidity: event TrackAdded(string roomId, address participant, string trackName, string sessionId)
func (_Contract *ContractFilterer) ParseTrackAdded(log types.Log) (*ContractTrackAdded, error) {
	event := new(ContractTrackAdded)
	if err := _Contract.contract.UnpackLog(event, "TrackAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
